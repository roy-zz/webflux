package com.roy.webflux.util;

// 비동기 작업을 처리하고 ListenableFuture와 같은 객체를 가져와서 Callback으로 데이터를 넣는 것들을 작업이 있다고 가정해본다.
// 우리가 만드는 `Completion`이라는 클래스는 완료되었을 때 에러가 났을 때 이러한 처리를 다시 한 번 재정의 해주기 위한 클래스라고 보면된다.
// 첫 번째 비동기 작업은 의존성이 앞에 어떤 작업에 의존하지 않기 때문에 파라미터 값 정도를 의존하는 것 말고는 의존성이 없다.
// 두 번째 비동기 작업 같은 경우는 사실 앞에 비동기 작업이 완료 및 성공을 하게 되면 그 때 정보를 받아서 작동하는 의존적인 비동기 작업이다.
// 세 번째 비동기도 같은 구조라고 볼 수 있다.

// TODO
public class Completion {
}
